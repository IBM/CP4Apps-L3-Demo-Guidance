{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/","title":"Demo Environment Setup Guide","text":""},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#deploy-java-app-to-ocp-demo-environment","title":"Deploy Java App to OCP Demo Environment","text":""},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#hands-on-setup-guide","title":"Hands-on setup guide","text":""},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#1-introduction","title":"1    Introduction","text":"<p>This demo environment setup script walks through the prerequisite steps to setup demo environment for doing the Deploy Java App to OpenShift Container Platform (OCP) demo.</p>"},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#2-reserve-demo-environment","title":"2    Reserve demo environment","text":"<p>The demo environment runs in IBM Cloud. You can reserve the environment by using the following steps:</p> <ol> <li> <p>Launch the IBM Technology Zone Create a reservation URL.</p> </li> <li> <p>Use your IBM ID to login to the IBM Technology Zone, the Create a reservation page is displayed.</p> </li> <li> <p>Select Reserve now (A) button.</p> </li> </ol> <p></p> <ol> <li> <p>Follow the on-screen dialog to reserve an environment in an IBM Cloud data center in the closest Geography (US-Central, EMEA, Asia Pacific).</p> <ul> <li>Accept the default environment name as Liberty Container Deployment with CP4Apps on OpenShift </li> <li>Purpose: select Education </li> <li>Description: Enter a description. The field is required </li> <li>Preferred Geography: Choose an IBM Cloud datacenter in the closest geography (US, EMEA, Asia Pacific) </li> <li>End date and time: Use the calendar widget and select the maximum date available and select a time of day for reservation to expire and select a timezone nearest to you. </li> <li>VPN Access: Select Enable from the dropdown list.</li> </ul> </li> <li> <p>When entered all reservation information as described above, check the agreement box (A) and click on the Submit (B) button.</p> </li> </ol> <p> </p> <ol> <li>The reservation takes a moment to be created. You can check its status by selecting My library (A) then clicking My reservations (B).</li> </ol> <p></p> <p>You see your reservation is in the Provisioning status.</p> <p> </p> <p>It might take 15 minutes for the demo environment to be provisioned. When the environment is created, its status is changed to Ready.</p> <p></p>"},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#3-access-the-demo-environment","title":"3    Access the demo environment.","text":"<ol> <li>When the demo environment is provisioned, click the reservation icon (A) to go to its details page.</li> </ol> <ol> <li>In the reservation details page, click the Workstation VM (A) URL link to open the URL in a new browser window.</li> </ol> <ol> <li>Click vnc.html (A) link.</li> </ol> <ol> <li>Click the Connect (A) button.</li> </ol> <ol> <li>Enter the password as: passw0rd (A). Then click the Send Credentials (B) button to access the lab environment.</li> </ol> <p>Note: That is a numeric zero in passw0rd.</p> <p>Once you log in to the Demo VM, you see the Desktop, which contains all the programs that you are going to use (browsers, terminal, and so on).</p> <p></p> <p>The login credentials for the demo VM are:</p> <ul> <li>User ID: techzone</li> <li>Password: passw0rd </li> </ul>"},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#4-tips-for-working-in-the-demo-environment","title":"4    Tips for working in the Demo environment","text":"<ol> <li> <p>You can resize the viewable area by using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a.    From the demo VM, expand the noVNC control pane (A) to open the menu. </p> <p></p> <p>b.    To increase the visible area, click the Settings (A) and click Remote Resizing (B) from the Scaling Mode dropdown box.</p> <p></p> </li> <li> <p>You can copy text from the Demo guide into the Demo environment by using the clipboard in the noVNC viewer. </p> <p>a.    Copy the text from the Demo guide that you want to paste into the Demo environment.</p> <p>b.    Click the Clipboard (A) icon and paste the text into the noVNC Clipboard (B).</p> <p> </p> <p>c.    Paste the text into the VM, such as to a terminal window, text editor or browser window.</p> <p>d.    Click on the clipboard icon again to close the clipboard</p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/01%20Environment%20Setup%20Guide/#5-configure-the-demo-environment","title":"5    Configure the demo environment","text":"<ol> <li> <p>Clone GitHub demo artifacts.</p> <p>To run the demo, you need to clone the GitHub demo artifacts to the Demo VM environment first.</p> <p>a.    Click the terminal (A) icon.</p> <p></p> <p>b. Clone the GitHub repo by running the following commands from the terminal window. </p> <pre><code>cd /home/techzone\ngit clone https://github.com/IBMTechSales/appmod-pot-labfiles.git\n</code></pre> <p>When it is done, the local demo artifacts repo will be at the /home/techzone/appmod-pot-labfiles directory on the demo VM desktop.</p> <p>c.    Copy the demo zip file to the /home/techzone/Downloads directory and unpack it by running the following commands:</p> <pre><code>cp /home/techzone/appmod-pot-labfiles/demo/modresorts10war.ear_migrationBundle-demo_ready.zip /home/techzone/Downloads\n\nunzip -d ~/Downloads /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready.zip\n</code></pre> </li> <li> <p>Configure Transformation Advisor.</p> <p>a. Launch Transformation Advisor from the terminal window with the command:</p> <pre><code>transformation-advisor-local-3.8.1/launchTransformationAdvisor.sh\n</code></pre> <p>b. Type 5 and press Enter (A) to start the Transformation Advisor.</p> <p></p> <p>The Transformation Advisor is started after a few minutes.</p> <p></p> <p>c. Access the Transformation Advisor page from a web browser by double-clicking the browser (A) icon on the desktop.</p> <p></p> <p>d. Click the Transformation Advisor (A) bookmark in the browser to access it.</p> <p></p> <p>The Transformation Advisor page is displayed.</p> <p> </p> <p>e.    Create a workspace in Transformation Advisor by clicking Create new (A).</p> <p></p> <p>f.    Type Evaluation (A) as the workspace name and click Create (B).</p> <p> </p> <p>g. Upload collected WebSphere Server application data to Transformation Advisor by clicking Upload (A).</p> <p></p> <p>h.    Click Drop or add file (A).</p> <p></p> <p>i.    In the File Upload window, navigate to the /home/techzone/appmod-pot-labfiles/labs/TransformationAdvisor (A) folder, select AppSrv01-3.8.1.zip (B) and click Open (C).</p> <p></p> <p>After a few minutes, the collected WebSphere Server application data is uploaded into Transformation Advisor.</p> <p></p> </li> </ol> <p>The Demo environment setup is now completed.</p>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/","title":"Demo Guide","text":""},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#deploy-java-app-to-ocp","title":"Deploy Java App to OCP","text":""},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#hands-on-demo-guide","title":"Hands-on demo guide","text":""},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#1-introduction","title":"1    Introduction","text":"<p>This demo provides fundamental hands-on experience with modernizing existing Java applications to WebSphere Liberty, deployed into a container platform, such as Red Hat OpenShift.</p> <p>The focus of this demo is on the practical aspects of how to use the deployment artifacts created by Transformation Advisor to speed up the process to deploy a Java app to Liberty running on OpenShift to achieve the objective for operation modernization.</p> <p>Open Liberty is an application server designed for the cloud. It\u2019s small, lightweight, and designed with modern cloud-native application development in mind. </p> <p>Open Liberty supports the full MicroProfile and Jakarta EE APIs and is composable, meaning that you can use only the features that you need, keeping the server lightweight, which is great for microservices. It also deploys to every major cloud platform, including Docker, Kubernetes, and Cloud Foundry.</p> <p>Operational Modernization gives an operations team the opportunity to embrace modern operations best practices without putting change requirements on the development team.</p> <p>The scaling, routing, clustering, high availability, and continuous availability functionality that were previously provided by the application server middleware, can be provided by the container platform.</p> <p>This allows the operations team to run cloud-native and modernized applications in the same environment with the same standardized logging, monitoring, and security frameworks.</p> <p>The operation modernization solution provided by IBM Cloud Pak for Application is to move existing Java applications to Liberty containers.</p> <p>IBM Cloud Transformation Advisor (TA) is an application modernization tool that is entitled through IBM Cloud Pak for Applications. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud.</p> <p>The Transformation Advisor tool provides the following value:</p> <ul> <li>Identifies the Java EE programming models in the app</li> <li>Determines the complexity of replatforming these apps by listing a high-level inventory of the content and structure of each app</li> <li>Highlights Java EE programming model and WebSphere API differences between the WebSphere runtime profile types</li> <li>Identifies Java EE specification implementation differences that might affect the app</li> <li>Generates accelerators for deploying the application to Liberty and containers in a target environment</li> </ul> <p>Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It automatically generates a migration bundle with the artifacts you will need to containerize your application running on Liberty and deploy it to OpenShift Cloud Platform, accelerating application migrating to cloud process, minimizing errors and risks and reducing time to market.</p> <p>Operator is the Kubernetes operator and specifically the Liberty operator. Liberty operator is used in the demo to deploy the app running on Liberty to the OpenShift Container Platform (OCP). The value of operators, in general, is that it really simplifies the amount of configuration required to do a deployment via all the YAML files that are typically required in Kubernetes. Additional benefits specifically to the Liberty operator is that it offers the automation of common tasks, like deploying, scaling, getting dumps, including thread dumps, core dumps and heap dumps, and gathering app logs. Another key benefit of the operator is that it provides out-of-the-box security capability, including certificate management integration with OCP and single sign-on delegation.</p> <p>Kubernetes Kustomize is a tool that is native to Kubernetes that is available for customizing Kubernetes configuration. The idea is that the base configuration can be reused for deployments across different environments like development, staging, and production. The changes and modifications for different environments are provided as the adjustment snippets for the base configuration override. In this demo the deployment YAML file created by Transformation Advisor uses the Kustomize tool.</p> <p>Mod Resorts app is a WebSphere application showing the weather in various locations. This app is initially developed for WebSphere traditional.  In the demo it will be moved to Liberty in a container and deployed to OCP.</p> <p></p> <p>Demo Commands File lists all the commands used to setup and run the demo, so you can open it in a text editor and directly copy/paste the commands during the demo without going through the noVNC control pane. This file is provided to simplify the demo process. The file name is demo-setup-plus-commands.txt and it is in the /home/techzone/appmod-pot-labfiles/demo directory. </p> <p></p> <p>The commands used for this demo start from line 71 of the file.</p> <p></p> <p>In this demo, we are going to showcase how to rapidly deploy and configure the Mod Resorts app in Liberty running on an OpenShift Container Platform (OCP). We will show how easy it is to use IBM Transformation Advisors migration artifacts to accelerate the steps of the modernization journey, including build, configuration, and deployment. It will demonstrate that how quickly clients can realize the values from WebSphere Liberty and OCP, which provide greater deployment flexibility and operational efficiencies across the enterprise. We are also going to show how to config and use IBM License Service in OCP.</p> <p>The objectives of this demo are to:</p> <ul> <li>Learn how to use the Transformation Advisor migration bundle to build the application into a container image</li> <li>Learn the role of Kustomize when deploying the migration bundle</li> <li>Learn how to deploy the app to OpenShift with a single command</li> <li>Review the deployment configuration and learn how to configure and use the IBM License Service tracking in OCP</li> </ul>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#2-access-transformation-advisor","title":"2    Access Transformation Advisor","text":"<pre><code>Talking Points\n\nTo get started in the demo, I will go to IBM Transformation Advisor User Interface to look at the WebSphere applications Transformation Advisor analyzed \n\nAt the beginning of this demo, I have already gotten the Transformation Advisor Data Collector run on the WebSphere Application Server and gotten the analysis data loaded into the Transformation Advisor User Interface. \n\nNow let me go to Transformation Advisor User Interface to take a look at these applications. I will focus on the simple WebSphere applications Transformation Advisor identified. A simple application is the app that Transformation Advisor has assessed and indicated that no code changes are required for the app to run on Liberty. \n</code></pre> <ol> <li> <p>If the Transformation Advisor is not started yet, start it by running the command below in a terminal window. Otherwise skip this step.</p> <pre><code>cd /home/techzone/transformation-advisor-local-3.8.1\n\n./launchTransformationAdvisor.sh\n</code></pre> </li> <li> <p>Type 5* and press *Enter (A) to start the Transformation Advisor.</p> <p> </p> <p>The Transformation Advisor is started after a few minutes.</p> <p> </p> <p>Note: You might see an error message when launching the Transformation Advisor, just ignore it, because it will not impact the start of Transformation Advisor.</p> </li> <li> <p>Access Transformation Advisor page from a web browser by clicking the Transformation Advisor (A) bookmark in the browser.</p> <p> </p> <p>The Transformation Advisor page is displayed.</p> <p> </p> </li> <li> <p>Click the Evaluation workspace (A) to open it.</p> <p> </p> <p>The Evaluation workspace is displayed.</p> <p> </p> <p>Notice that only WebSphere Liberty is selected as Migration target which is the platform we want to move the Mod Resorts app to.</p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#3-download-transformation-advisor-migration-plan","title":"3    Download Transformation Advisor migration plan","text":"<pre><code>Talking Points\n\nNow I am in Transformation Advisor and as one can see there are five applications assessed. \n\nWe have other demonstrations that showcase how to do an application assessment and how to interpret the results, but in this demo, I am going to focus primarily on the migration plan and what it is going to take to move an application from the WebSphere traditional to WebSphere Liberty running on a container platform.\n\nI want to focus on moving a simple application from WebSphere traditional to Liberty without any code change. As you can see, five applications have been assessed and four of these have been classified as simple, meaning no code change is required to move them to Liberty. I will choose the Mod Resort application that I have staged and set up for the demo.\n\nFirst, I will take a look at the Transformation Advisor migration plan which contains the artifacts that have been generated by Transformation Advisor as a result of scanning the application and the configuration in WebSphere Application Server (WAS). By doing so, I can understand the Liberty server configuration, the build file to build the container image as well as the YAML artifacts to deploy into a Kubernetes and OCP which are created by Transformation advisor. \n\nIn this task, I need to simply download the migration plan to my local workstation.\n</code></pre> <ol> <li> <p>Scroll down to locate the Mod Resort application (A) in Transformation Advisor and click Migration plan (B).</p> <p> </p> </li> <li> <p>The Migration plan page is displayed, click Download (A).</p> <p> </p> <p>The Migration plan package named modresorts10war.ear_migrationBundle.zip is now downloaded to the Downloads directory of the demo VM. It contains the Liberty server configuration (server.xml), the build file (Containerfile) to build the container image as well as the YAML artifacts to deploy into a Kubernetes or OCP environment.</p> <p></p> <p>Note: The Transformation Advisor Migration plan package is also called the Transformation Advisor migration bundle.</p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#4-review-the-updated-transformation-advisor-migration-bundle","title":"4    Review the updated Transformation Advisor migration bundle","text":"<pre><code>Talking Points\n\nThe Mod Resorts app Migration bundle gets downloaded into the Downloads directory of the local file system from Transformation Advisor. \n\nIn order to deploy the application to Liberty on OpenShift, I need to make a few changes to the bundle, including changing server configuration settings, adding app war file and update image file name and other settings in the deployment YAML file. To keep the demo simple, I will use a prepared migration bundle where I already applied the required changes. The prepared migration bundle package is in the modresorts10war.ear_migrationBundle-demo_ready directory.\n\nI will take a quick look at what are in the migration bundle:\n\n1. The bundle includes a file named Containerfile to build the container image with the app deployed on Liberty. \n\n2. I placed the war file of the Mod Resorts app into the target directory. Since no code changes are required, I do not need to rebuild the application and just copied the war file that WAS used. \n\n3. The source directory in the bundle includes the liberty server configuration file, server.xml, which is created by Transformation Advisor. It includes the server configuration for Mod Resorts to run in Liberty and a few minor modifications I made.\n\n4. The last piece I want to look at is the deployment artifacts in the deploy directory of the migration bundle. These are the YAML files that Transformation Advisor created to deploy the app to a Kubernetes environment using the standard Kubernetes resources or the Liberty operator. In this demo, I am using the Liberty Operator and the Kustomize tool to deploy the app to OCP. \n\nBasically, I have the customization files for deploying the Mod Resorts app to Liberty container running on OCP and I will use these customized migration bundle files that Transformation Advisor generated.\n</code></pre> <ol> <li> <p>From the File manager window, click the modresorts10war.ear_migrationBundle-demo_ready (A) folder under the /home/techzone/Downloads directory to access it.</p> <p></p> </li> <li> <p>Review the contents in the directory. The migration bundle has all artifacts that we need to deploy the app to Liberty in container and to a Kubernetes environment. The Containerfile is the one to be used to create the Docker image.</p> <p></p> </li> <li> <p>Click target (A) folder to access it.</p> <p></p> <p>This directory contains the original app war file because there are no code changes needed to move it from WebSphere traditional to Liberty.</p> <p></p> </li> <li> <p>Click the src (A) folder and go to the main&gt;liberty&gt;config directory.</p> <p></p> <p>You see the Liberty configuration file, server.xml, which includes the server configuration for Mod Resorts to run in Liberty and a few minor modifications.</p> <p></p> </li> <li> <p>Click the deploy (A) folder to open it</p> <p></p> <p>You see two folders, k8s and kustomize, which contain the YAML files that Transformation Advisor created to deploy the app to a Kubernetes environment. While the k8s folder is used for deployments using the standard Kubernetes resources, kustomize is used for deployments using the Liberty operator.</p> <p></p> </li> <li> <p>Click the kustomize (A) folder and go to the base directory.</p> <p></p> <p>The base folder contains the YAML files used to deploy the app to a Liberty container running on OCP using Liberty operator.</p> <p></p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#5-create-docker-container-image","title":"5    Create Docker container image","text":"<pre><code>Talking Points\n\nTo deploy the Mod Resorts app in Liberty on container, I need to build a container image for the app first. In this task, I am going to leverage the updated migration bundle artifices, and create a Docker container for the Mod Resorts app. I will show how easy it is to deploy the app in a local Docker container using the migration bundle artifices from Transformation Advisor.\n\nThe first thing I am going to do is to go to the migration bundle directory structure and run the command to build the Docker image. The command will take the Containerfile that Transformation Advisor created and it is going to build the container image for the Mod Resorts app running on Liberty. \n\nAfter the image is created, I will verify it by starting a Docker container with docker run command. I will verify that the container is running and show I can access the Mod Resorts app running on Liberty in a local Docker container.\n\nOnce the image is created and verified, it is ready to be deployed to OCP in the next task.\n</code></pre> <ol> <li> <p>From a terminal window, go to the migration bundle directory with command:</p> <pre><code>cd /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready\n</code></pre> </li> <li> <p>Build Docker image with command:</p> <pre><code>docker build -f ./Containerfile --tag default-route-openshift-image-registry.apps.ocp.ibm.edu/resorts/modresorts:23009 .\n</code></pre> <p>The Docker image is built.</p> <p> </p> <p>Note: The first time to build the Docker image, it will take a longer time because it needs to download all the artifacts to the local demo VM. After that, each build will only pull down the updated artifacts, so the process will be much fast. Therefore, it is recommended to run the command to build the image first before doing the client facing demo to save time.</p> </li> <li> <p>To verify the Docker image, run the command below:</p> <pre><code>docker images | grep resorts\n</code></pre> <p>You see that the Docker image is created.</p> <p> </p> </li> <li> <p>Now we start the app container with the Docker image with the following command:</p> <pre><code>docker run -d --rm -p 9080:9080 --name resorts default-route-openshift-image-registry.apps.ocp.ibm.edu/resorts/modresorts:23009\n</code></pre> </li> <li> <p>To verify the container is running, issue the following command:</p> <pre><code>docker ps | grep resorts\n</code></pre> <p>You see that the container is running.</p> <p> </p> </li> <li> <p>To test the application, access its URL at http://localhost:9080/resorts (A) from a browser window.</p> <p> </p> <p>The Mod Resorts application page is displayed.</p> <p> </p> </li> <li> <p>Click WHERE TO? (A) and select San Francisco, USA (B).</p> <p> </p> <p>The weather information is San Francisco is showing.</p> <p> </p> <p>Now we have tested and verified that the app is running on Liberty container. What we will do next is to deploy the app in Liberty container to OCP.</p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#6-deploy-to-openshift-environment","title":"6    Deploy to OpenShift environment","text":"<pre><code>Talking Points\n\nIn the last section, I have built the Mod Resorts app on Liberty container image and tested it.\nAlso in the previous section, we explored the Kubernetes kustomize structure coming from the Transformation Advisor migration bundle.\n\nIn this section I will use the kustomize tool to deploy the Mod Resorts app to OCP. \n\nBefore I do the deployment, I will stop the local Docker container first.\n\nIn order to deploy the Mod Resorts app to OCP, I will push the image to an image registry which can be any image registry the clients are using. In this demo, I am going to use the internal registry that is available in the OCP environment. \n\nTo push the image into OCP, I will need to log into the OCP environment, create a new project called resorts for the app and log into the internal OCP image registry. Then I will run a single command to push the app image from my local VM to the OCP image registry. \n\nAfter pushed the image into the OCP image registry, I will verify it either from command line or from the OCP web console.\n\nOnce I have uploaded the app image into OCP, I am ready to deploy the app to OCP. With Transformation Advisor, this deployment process is made really simple by using the artifacts that Transformation Advisors created and using the kustomize tool in Kubernetes. One can configure and deploy all in a single command and a single step.\n\nAfter the app is deployed to OCP, we can access it through its route URL which is generated by the Liberty operator.\n</code></pre> <ol> <li> <p>From a terminal window, run the following command to stop the local Liberty container.</p> <pre><code>docker stop resorts\n</code></pre> <p>The local Liberty container is now stopped.</p> </li> <li> <p>Log in to the OCP cluster with command:</p> <pre><code>oc login -u ocadmin -p ibmrhocp\n</code></pre> <p></p> </li> <li> <p>Create a new project called resorts for the Mod Resorts app with command:</p> <pre><code>oc new-project resorts\n</code></pre> <p></p> </li> <li> <p>Log in to the OCP image registry with command:</p> <pre><code>docker login -u $(oc whoami) -p $(oc whoami -t) default-route-openshift-image-registry.apps.ocp.ibm.edu\n</code></pre> <p></p> </li> <li> <p>Now push the app image to the OCP image registry with command:</p> <pre><code>docker push default-route-openshift-image-registry.apps.ocp.ibm.edu/resorts/modresorts:23009\n</code></pre> <p></p> <p>Note: It might take a few minutes to upload the image to the registry.</p> </li> <li> <p>After the image is uploaded to the OCP image registry, we can verify it with command:</p> <pre><code>oc get is\n</code></pre> <p> </p> </li> <li> <p>We can also verify it from the OCP web console.</p> <p>a.  Access the OCP web console by clicking the OpenShift Console (A) bookmark in the web browser.</p> <p> </p> <p>b.  Accept the default Username/Password and click Log in (A).</p> <p></p> <p>After logged in, the OCP web console Home page is displayed.</p> <p> </p> <p>c.  Click Builds (A), select ImageStreams (B) and select resorts project (C), we can see that the app image is listed.</p> <p> </p> <p>d.  Click the app image link (A) to view its details.</p> <p> </p> <p>The app image detail page is displayed.</p> <p> </p> <p>Now we have verified that the app image is uploaded, we are ready to deploy the app to OCP using the YAML artifacts generated by Transformation Advisor.</p> </li> <li> <p>From the OCP web console, click Workloads (A) and click Pods (B), we can see that currently we do not have any app pods running.</p> <p></p> </li> <li> <p>From the OCP web console, click Workloads (A) and click Deployment (B), we can see that currently we do not have any app deployment yet.</p> <p></p> </li> <li> <p>To deploy the Mod Resorts app to OCP, go to the terminal window and run the following commands:</p> <pre><code>cd /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready\n\ncd deploy/kustomize\n\noc apply -n resorts -k overlays/resorts_1.0\n</code></pre> <p></p> <p>This is a quick command run. Please note that the oc apply command is using the kustomize tool with a -k option and it is pointing to the overlays directory and a sub directory named resource_1.0, so it uses the YAML files in that overlay directory in addition to the base configuration that is in the base directory of the migration bundle.</p> </li> <li> <p>To check the status of the deployment, we can run command:</p> <pre><code>oc get pods\n</code></pre> <p>You see that 8 pods are created and they are starting to run. We might need to run the same command a few times until all 8 pods are up running.</p> <p> </p> </li> <li> <p>Once these pods are up and running, we need to get the application route so we can access it. To get the route, run command:</p> <pre><code>oc get route -n resorts\n</code></pre> <p>You see that the app route is: http://modresorts10war-resorts.apps.ocp.ibm.edu</p> <p></p> </li> <li> <p>With the app route information, we can access the Mod Resorts app in OCP from a web browser by entering the URL as: http://modresorts10war-resorts.apps.ocp.ibm.edu/resorts (A).</p> <p></p> <p>You see that the Mod Resorts app has been successfully deployed to the OCP environment and is running on the OCP now.</p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#7-review-the-deployment-configuration-and-use-the-license-service","title":"7    Review the deployment configuration and use the License service","text":"<pre><code>Talking Points\n\nI have deployed the Mod Resorts app to the OCP environment with 8 pods running in the previous section.\n\nNow I will take a look at the deployment YAML file to review the deployment configuration.\n\nTo deploy the Mod Resorts app to the OCP, I used the app YAML file in the base/kustomize folder of the migration bundle, which actually points to the app image that I pushed to the OCP image registry.\nIn this particular deployment YAML file, I have specified to spin up 8 replicas of the Mod Resorts app and that is the reason we see the 8 pods running in the OCP environment.\n\nI added the license tracking information in the YAML file, so we see how the license service is working with the Liberty operator in OCP. \n\nIn order to deploy the app and use the license service in OCP, I need to specify that I accept the license, where to get the entitlement from and what the Liberty edition I am using. I set the entitlement and the Liberty edition as: the Cloud Pak for Applications and Liberty Core. \n\nAdditionally, I put a resource limit on the amount of CPU each pod can use and specified it as 1 virtual core. In general, the CPU limit should be set to a value for what the app needs, the value impacts not only the licensing but also the app deployment and overall CPU usage. I did this setting to demo the license tracking capability in OCP. Because in Cloud Pak for Applications Standard edition Liberty Core deployment is based on virtual processor cores in 8 to 1 ratio, meaning that based on the deployment configuration I set, even I have 8 Liberty Core pods running in OCP, I only consumed 1 virtual processor core of Cloud Pak for Applications. \n\nFinally, I will show how to access the License tracing service report in OCP.\n</code></pre> <ol> <li> <p>To review the deployment configurations, double-click the File Manager (A) icon on the Desktop.</p> <p> </p> </li> <li> <p>Navigate to the /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready/deploy/kustomize/base directory.</p> <p>The contents in the directory are displayed.</p> <p> </p> </li> <li> <p>Click the application-cr.yaml (A) file to open it for reviewing. This is the application customer resource YAML file.</p> <p></p> <p>The content of the YAML file is displayed.</p> <p> </p> <p>As we can see from this configuration file, the deployment replica is set as 8. The app image is pointing to the image that we pushed to the OCP image registry. The license tracking information is added as Cloud Pak for Application and Liberty Core and the CPU resource limit is set at 1000m.</p> </li> <li> <p>Now we can take a look at the license tracing service report about our license usage. To do it, go to the web browser and click the IBM License Service Status-with token (A) bookmark.</p> <p> </p> <p>Note: we can also enter the IBM License Service Status-with token URL as:  https://ibm-licensing-service-instance-ibm-common-services.apps.ocp.ibm.edu/status?token=dnwsnLNwvQ9ie4o9U5mpRhoG</p> <p>The License Service Report is displayed.</p> <p> </p> <p>The report shows that Liberty Core is running in 8 pods with one CPU per pod, so in total we consume 8 CPUs and the total Cloud Pak for Application license consumed is 1.</p> </li> <li> <p>Let\u2019s see that happened to the report if we remove the Mod Resorts app deployment from the OCP. To do it, run the following command from the terminal window to delete the deployment:</p> <pre><code>oc delete -n resorts -k overlays/resorts_1.0\n</code></pre> <p></p> </li> <li> <p>Now the Mod Resorts app deployment is deleted, let\u2019s see what happened in the License Service Report. Go back to the browser window and refresh (A) the License Service Report page.</p> <p> </p> <p>As we can see there is nothing listed in the report anymore.</p> <p> </p> </li> </ol>"},{"location":"Deploy%20Java%20App%20to%20OCP/02%20Demo%20Guide/#8-summary","title":"8    Summary","text":"<p>In this demo, we learned how to move a WebSphere app from WebSphere traditional to WebSphere Liberty container and deploy it to OCP using the deployment artifacts produced by Transformation Advisor in its migration bundle.</p> <p>You explored the options for deployment:</p> <ul> <li>Liberty as an image running in a local container.</li> <li>Liberty as an image running in OpenShift.</li> </ul> <p>You learned how to easily configure and deploy an app to OpenShift using Transformation Advisor migration bundle deployment artifacts which leverage the Kubernetes kustomize tool.</p> <p>You learned how to enable the License service to the track the Liberty license usage in the deployment YAML and use Liberty operator and IBM License Service in OCP to access the License tracking report.</p>"},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/","title":"Demo Environment Setup Guide","text":""},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#liverty-dev-mode-demo-environment","title":"Liverty Dev Mode Demo Environment","text":""},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#hands-on-setup-guide","title":"Hands-on setup guide","text":""},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#1-introduction","title":"1    Introduction","text":"<p>This demo environment setup script walks through the prerequisite steps to setup demo environment for doing the Liberty dev mode demo.</p>"},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#2-reserve-demo-environment","title":"2    Reserve demo environment","text":"<p>The demo environment runs in IBM Cloud. You can reserve the environment by using the following steps:</p> <ol> <li> <p>Launch the IBM Technology Zone Create a reservation URL</p> </li> <li> <p>Use your IBM ID to login to the IBM Technology Zone, the Create a reservation page is displayed.</p> </li> <li> <p>Select Reserve now (A) button.</p> </li> </ol> <p></p> <ol> <li> <p>Follow the on-screen dialog to reserve an environment in an IBM Cloud data center in the closest Geography (US-Central, EMEA, Asia Pacific).</p> <ul> <li>The environment name should be pre-filled with Liberty Getting Started, Transformation Advisor and Mono2Micro Lab Environment - onboarded </li> <li>Purpose: Education </li> <li>Description: Enter a description. The field is required </li> <li>Preferred Geography: Choose an IBM Cloud datacenter in the closest geography (US, EMEA, Asia Pacific) </li> <li>End date and time: Use the calendar widget and select the maximum date available and select a time of day for reservation to expire and select a timezone nearest to you. </li> <li>VPN Access: Select Enable from the dropdown list.</li> </ul> </li> <li> <p>Once complete, check the agreement box (A) and click on the Submit (B) button.</p> </li> </ol> <p> </p> <ol> <li>The reservation takes a moment to be created. You can check its status by selecting My library (A) then clicking My reservations (B).</li> </ol> <p></p> <p>You see your reservation is in the Provisioning status.</p> <p> </p> <p>It might take 15 minutes for the demo environment to be provisioned. When the environment is created, its status is changed to Ready.</p> <p></p>"},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#3-access-the-demo-environment","title":"3    Access the demo environment.","text":"<ol> <li>When the demo environment is provisioned, click the reservation icon (A) to go to its details page.</li> </ol> <ol> <li>In the reservation details page, click the noVNC (A) URL link to open the URL in a new browser window.</li> </ol> <ol> <li>Click the Connect (A) button.</li> </ol> <ol> <li>Enter the password as: IBMDem0s! (A). Then click the Send Credentials (B) button to access the lab environment.</li> </ol> <p>Note: That is a numeric zero in IBMDem0s!d.</p> <p>Once you log in to the demo VM, you see the Desktop, which contains all the programs that you are going to use (browsers, terminal, and so on).</p> <p></p> <p>The login credentials for the demo VM are:</p> <ul> <li>User ID: techzone</li> <li>Password: IBMDem0s! </li> </ul>"},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#4-tips-for-working-in-the-demo-environment","title":"4    Tips for working in the Demo environment","text":"<ol> <li> <p>You can resize the viewable area by using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a.    From the demo VM, click the twisty (A) on the noVNC control pane to open the menu. </p> <p></p> <p>b.    To increase the visible area, click the Settings (A) icon and select Remote Resizing (B) from the Scaling Mode dropdown box.</p> <p></p> </li> <li> <p>You can copy / paste text from the Demo guide into the Demo environment by using the clipboard in the noVNC viewer. </p> <p>a.    Copy the text from the Demo guide that you want to paste into the Demo environment.</p> <p>b.    Click the Clipboard (A) icon and paste the text into the noVNC Clipboard (B).</p> <p> </p> <p>c.    Paste the text into the VM, such as to a terminal window, text editor or browser window.</p> <p>d.    Click on the clipboard icon again to close the clipboard</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/01%20Environment%20Setup%20Guide/#5-configure-the-demo-environment","title":"5    Configure the demo environment","text":"<ol> <li> <p>Clone GitHub demo artifacts</p> <p>To run the demo, you need to clone the GitHub demo artifacts to the Demo VM environment first.</p> <p>a.    Click Activities (A) and then click the terminal (B) icon.</p> <p></p> <p>b. Clone the GitHub repo by running the following commands from the terminal window. </p> <pre><code>cd /home/techzone\n\ngit clone https://github.com/IBMTechSales/Liberty-getting-started-lab-files\n</code></pre> <p>Once it is done, the local demo artifacts repo will be at the /home/techzone/Liberty-getting-started-lab-files directory on the demo VM desktop.</p> <p>c.    Copy the demo zip file to the /home/techzone/Downloads directory and unpack it by running the following commands:</p> <pre><code>cp /home/techzone/appmod-pot-labfiles/demo/modresorts10war.ear_migrationBundle-demo_ready.zip /home/techzone/Downloads\n\nunzip -d ~/Downloads /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready.zip\n</code></pre> </li> <li> <p>Extract a sample application</p> <p>This demo uses a sample application called whereami which is included in the local demo artifacts repo.</p> <p>a. Run the following commands to extract the sample application whereami files.</p> <pre><code>cd /home/techzone/Liberty-getting-started-lab-files/demoFiles\n\nunzip whereami-with-tests.zip\n</code></pre> <p>The application files are extracted to the /home/techzone/Liberty-getting-started-lab-files/demoFiles/whereami directory.</p> </li> </ol> <p>The Demo environment setup is now completed.</p>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/","title":"Demo Guide","text":""},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#liberty-dev-mode","title":"Liberty Dev Mode","text":""},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#hands-on-demo-guide","title":"Hands-on demo guide","text":""},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#1-introduction","title":"1    Introduction","text":"<p>In this demo, you will show how developers can use Open Liberty in dev mode for achieving an efficient iterative develop, test, and debug cycle when developing Java based applications / microservices. Liberty dev mode works with WebSphere Liberty.  </p> <p>At the end of this demo, you should be able to showcase how to:  * use Liberty dev mode with an Integrated Development Environment (IDE)  * use Liberty Code Assistant to change configurations of a Liberty server * use Liberty Code Assistant to update Java application code * run integrated unit tests from Liberty dev mode</p> <p>Open Liberty is an application server designed for the cloud. It\u2019s small, lightweight, and designed with modern cloud-native application development in mind. </p> <p>Open Liberty supports the full MicroProfile and Jakarta EE APIs and is composable, meaning that you can use only the features that you need, keeping the server lightweight, which is great for microservices. It also deploys to every major cloud platform, including Docker, Kubernetes, and Cloud Foundry.</p> <p>Maven is an automation build tool that provides an efficient way to develop Java applications. </p> <p>Liberty development mode, or dev mode, allows developers to develop applications with any text editor or IDE by providing hot reload and deployment, on-demand testing, and debugger support. Liberty dev mode is enabled through Maven and Gradle projects. </p> <p>With Liberty dev mode, the application code is automatically compiled and deployed to the running server, making it easy to iterate on the code changes. </p> <p>Developers can run tests on-demand or even automatically so that you can get immediate feedback on their changes. They can also attach a debugger at any time to debug their running application.</p> <p></p> <p>Visual Studio Code  (VS Code) is a code editor redefined and optimized for building and debugging modern web and cloud applications. VS Code is the IDE used in this Demo environment.</p> <p>This demo has the following steps: 1.  Create a Liberty web application 2.  Update the Liberty web application 3.  Run Liberty dev mode using integrated development environment 4.  Update Liberty server configuration with Liberty Code Assistant 5.  Modify application code with Liberty Code Assistant 6.  Conduct a unit test in Liberty dev mode 7.  Summary</p>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#2-1-create-a-liberty-web-application","title":"2    1.  Create a Liberty web application","text":"<pre><code>Talking Points\n\nThe objective of this step is to develop a simple web application for Liberty. I will use a Liberty starter application to start from scratch and use VS Code and Liberty Tools to build the application. I will create a Jakarta EE 10 Web application with the name whereamI and will use maven to build it. \n\nThe fastest way to get started with Liberty is to use an Open Liberty starter application which generates a project with the maven configuration as well as a basic Liberty setup.\n\nThe Open Liberty starter gives us a simple, quick way to get the necessary files to start building an application on Open Liberty. There is no need to search how to find out what to add to my maven or gradle build files. A simple RestApplication.java file is generated for us to start creating a REST-based application. A server.xml configuration file is provided with the necessary features for the MicroProfile and Jakarta EE versions that I selected.\n</code></pre> <ol> <li> <p>Open a browser window by clicking on Activities (A) and then select the Firefox browser (B) icon.</p> <p></p> </li> <li> <p>Enter the URL https://openliberty.io/start/.     The Open Liberty Starter page is displayed.</p> <p> </p> </li> <li> <p>Change the artifact name to whereami (A), change the Java level to 17 (B) and leave the rest as is, then click Generate project (C).</p> <p></p> </li> <li> <p>Click on Save (A) to save the project under the Downloads directory of the demo VM.</p> <p></p> <p>You will see a pop-up like the one below. Click Got it! (A) to close the window.</p> <p></p> </li> <li> <p>Click Activities (A) and switch to the terminal window (B). </p> <p> </p> </li> <li> <p>From the terminal window, extract the project zip file to the working directory with the following commands.</p> <pre><code>mkdir ~/Student\n\nunzip ~/Downloads/whereami.zip -d ~/Student/whereami\n</code></pre> <p>The project is extracted to the ~/Student/whereami directory.</p> </li> <li> <p>Inspect the whereami project artifacts and sour code files created by Open Liberty Starter Application using the command:</p> <pre><code>ls -l ~/Student/whereami\n</code></pre> <p>The whereami project artifacts and sour code files are listed.</p> <p></p> <p>As you can see, the Open Liberty Starter Application creates the project structure and basic artifacts needed for the project. If you want to do development in docker or containers, it has the Dockerfile ready. It also contains the pom file because you selected a maven project in the Starter Application. </p> </li> <li> <p>View the contents of the pom.xml file with the command:</p> <pre><code>cat ~/Student/whereami/pom.xml\n</code></pre> <p></p> <p>You see that the pom file has the basic structure of a Java application configuration with maven and it is using MicroProfile and open liberty tools as the starter which allows you to build the application.</p> </li> <li> <p>View the contents of the Liberty server.xml file with the command:</p> <pre><code>cat ~/Student/whereami/src/main/liberty/config/server.xml\n</code></pre> <p></p> <p>In the application source what you are seeing is that it is a very simple configuration for the liberty server which is basically pulling in the Jakarta E10 and the MicroProfile 6 features that you defined in that starter kit.</p> <p>Ideally you would list up a fewer of the sub features instead of those convenience features but that's a good way to get started.</p> </li> <li> <p>View the contents of the RestApplication.java file with the command:</p> <pre><code>cat ~/Student/whereami/src/main/java/com/demo/rest/RestApplication.java\n</code></pre> <p></p> <p>As you can see that the Starter Application creates the starter set for a rest application that you can start developing with. The next step is to add application functions and business logic to the project.</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#3-update-the-whereami-application","title":"3    Update the whereami application","text":"<pre><code>Talking Points\n\nIn this step, I am going add application functions and business logic to the whereami application. To save time, I am going using the pre-built application code I get from my GitHub repo. The pre-built application code includes the following:\n\n1. there are some minor changes to the Liberty server.xml file.\n\n2. a servlet class for whereami application, WhereAmI.java, has been created.\n\n3. a class for the unit test is added.\n</code></pre> <ol> <li> <p>Replace the whereami application code in the Student directory with the pre-built code from the GitHub repo with command:</p> <pre><code>cp -rf /home/techzone/Liberty-getting-started-lab-files/demoFiles/whereami/ ~/Student/\n</code></pre> </li> <li> <p>Inspect the updated whereami project artifacts and sour code files using commands:</p> <pre><code>ls -l ~/Student/whereami\n</code></pre> <p>The updated whereami project artifacts and sour code files are listed.</p> <p></p> </li> <li> <p>Check and test whereami application in VS Code with commands:</p> <pre><code>cd ~/Student/whereami\n\ncode .\n</code></pre> <p>The VS Code UI is opened.</p> </li> <li> <p>Click Yes, I trust the authors ** (A**) to continue.</p> <p></p> <p>If you see during the lab one of the pop-ups below or any other pop-up asking to install something, close the pop-up without installation by clicking the X (A). </p> <p></p> <p>When the project is loaded, you can see that you added the WhereAmI.java file as well as a unit test in the project.</p> <p></p> <p>You also configured the Liberty server with all features needed for the application.</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#4-start-liberty-dev-mod","title":"4    Start Liberty Dev Mod","text":"<pre><code>Talking Points\n\nLiberty development mode, or dev mode, allows us to develop applications with any text editor or IDE by providing hot reload and deployment, on demand testing, and debugger support. Liberty Dev Mode is enabled through Maven and Gradle projects.\n\nMy code is automatically compiled and deployed to my running server, making it easy to iterate on my changes.\n\nI can run tests on demand or even automatically so that I can get immediate feedback on my changes. I can also attach a debugger at any time to debug my running application.\n\nI can use the capabilities of Liberty dev mode inside and outside of an IDE. This provides with me the flexibility of choice. In a terminal window, I could use Liberty in dev mode with maven using the command mvn liberty:dev or mvn liberty:devc if I want to develop in a container.\n\nIn the demo environment, the Liberty tools plugin has been installed into VS Code. Therefore I will use the integrated Liberty dashboard instead.\u2003\n\nI will show how to run Liberty dev mode in VS Code and how to use the Open Liberty Tools in VS Code to work with my server configuration, application code and run integrated unit tests on demand, so that I can get immediate feedback on my changes.\n\nIn the VS Code environment, I will right-click project under LIBERTY DASHBOARD and select start.  This will start Liberty in dev mode and we will see the following message in the VS Code terminal window: Web application available (default_host): http://localhost:9080/wherami/. I can now access the application URL in the browser window to verify that the application is running.\n</code></pre> <ol> <li> <p>To start Liberty in Dev Mode right-click whereami (A)under LIBERTY DASHBOARD and select Start (B). </p> <p></p> <p>In a few seconds, the Liberty server will be up and running, and you can see that the whereami application is ready.</p> <p></p> </li> <li> <p>To access the whereami application, open a web browser and enter the application URL as: http://localhost:9080/whereami/.</p> <p>The application page is displayed.</p> <p></p> <p>It lists the information about Liberty version used, the host name, scheme, context path and port.</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#5-update-liberty-server-configuration-with-liberty-code-assistant","title":"5    Update Liberty server configuration with Liberty Code Assistant","text":"<pre><code>Talking Points\n\nNow I am going to make changes to the Liberty server configuration and enable the server https port and I am going to use Liberty code assistant to speed up the server configuration process.\n\nIn order to active the https port of the Liberty server, I need to add the transport security feature to the Liberty server and I can do it with Liberty code assistant.\n\nI will demonstrate that I can update Liberty server configuration using Liberty code assistant and activate the https protocol without stopping or restarting the Liberty server.\n</code></pre> <ol> <li> <p>In the VS Code environment, click to open the Liberty server configuration file server.xml (A) under the target/liberty/wlp/usr/server/defaultServer folder.</p> <p></p> <p>You can see that the https port is set as 9443.</p> </li> <li> <p>If you try to access the application from the browser window using the https port as: https://localhost:9443/whereami/ (A), you will get the Unable to connect error because although the https port value is defined, the https port is not activated on the Liberty server yet.</p> <p></p> </li> <li> <p>Back to VS Code, add a new line after servlet-6.0 (A) in the server.xml file, and activate the Liberty code assistant by pressing CTRL+SPACE, the code assistance window is shown.</p> <p></p> </li> <li> <p>Select feature (A) from the code assistant window to add a new feature element.</p> <p> </p> <p>This will add a new feature element to the file.</p> <p></p> </li> <li> <p>Type tr (A) in the feature field, the code assistant will offer the feature names containing the word tr.  Select the transportSecurity-1.0 (B) to add the feature.</p> <p></p> <p>As you can see that in Liberty Dev Mod, once the new feature is added, the server configuration is dynamically updated. Liberty code assistant automatically detects that the transportSecurity-1.0 feature requires the ssl-1.0 feature, so it adds the ssl-1.0 feature to the Liberty server configuration as well. </p> <p></p> </li> <li> <p>Now the https port is activated, if you try again to access the application from the browser window using the https port as: https://localhost:9443/whereami/ and accept the warning messages, you will get the application page.</p> <p></p> <p>You can see now the protocol scheme is https and the port is 9443 which means that the https protocol is activated.</p> <p>This demonstrates that using Liberty code assistance you can modify Liberty server configuration without restart the server.</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#6-modify-application-code-with-liberty-code-assistant","title":"6    Modify application code with Liberty Code Assistant","text":"<pre><code>Talking Points\n\nIn the previous section, I shown how to use Liberty code assistance to update the Liberty server configuration. \n\nNow I am going to use Liberty code assistant to make quick modifications to the application code. I will make code modifications to change the color of the text showing on the application page for different network protocols. I will have the red color for http protocol and the green color for https protocol. I will show how easy it is to make change the application code with the help of Liberty Code Assistant in Liberty Dev Mod.\n</code></pre> <ol> <li> <p>In the VS Code environment, click to open the servlet java file WhereAmI.java (A) under src/main/java/com/demo.</p> <p></p> </li> <li> <p>Scroll down to line 45 (A) and create a new line (B) in the file.</p> <p> </p> </li> <li> <p>Type i (A) and use Liberty code assistant (CTRL+SPACE) to select the if statement (B).</p> <p></p> </li> <li> <p>Highlight condtion:var(boolean) (A), press CTRL+SPACE and select httpScheme (B).</p> <p></p> </li> <li> <p>Type == \"http\" (A) next to httpScheme.</p> <p> </p> </li> <li> <p>Move to the next line (A), press CTRL+SPACE, and select zone (B).</p> <p> </p> </li> <li> <p>Type = \"red\"; (A) next to the zone.</p> <p></p> </li> <li> <p>Repeat the same process to add another if statement like this:</p> <pre><code>if (httpScheme == \"https\") {\n    zone = \"green\";\n}\n</code></pre> <p>You should see the application code you added as:</p> <p></p> </li> <li> <p>To verify the code changes, you can access the application page in the browser window with both http and https ports, and you can see the changes you made to the application.</p> <p> </p> <p>As you can see that when you made changes to your code, the changes were automatically saved and Liberty server adopted these new changes dynamically without re-starting. So as a developer, you can quick change, test and verify my application code.</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#7-conduct-a-unit-test-in-liberty-dev-mode","title":"7    Conduct a unit test in Liberty dev mode","text":"<pre><code>Talking Points\n\nWith Liberty Dev Mod, it is easy to conduct a unit test in the IDE.  Within the IDE, I can run the unit test and integration test by right-clicking project under LIBERTY DEV DASHBOARD and select run test.  This will active the test run and show the test results in the VS Code terminal window.  Another way to activate the unit test is to press the Enter key in the VS Code terminal window.\n\nIn this section I will show how to do a unit test. The test is designed to check if the title of the application is in capital letters or not.  It will be successful if the title of the application is in capital letters, otherwise it will fail.\n\nBy default, the title of the application is not in all capital letters, so my unit test will fail and provide information about where the issue is and how to fix it.  Based on the information, I will fix the error and run the test again, the unit test will be a success after the code fixing.  I will demonstrate how the Liberty Code Assistant and Liberty Dev Mod can help speed up the unit test process.\n</code></pre> <p>As you know from the previous section, the title of the application, Where Am I Running?,  is not all in capital letters as shown below:</p> <p></p> <p>So your unite test will not going to be successful as expected.</p> <ol> <li> <p>From the VS Code environment, go to the terminal window and press Enter (A).</p> <p></p> <p>This will activate the unit test and integration test. You will see that the tests will fail with the message: FAIL! ---&gt; The header is in \u2018lower case\u2019!.</p> <p></p> </li> <li> <p>To fix the error, you need to update your code. Go back to WhereAmI.java file in VS Code, scroll down (A) and go to the line 64 (B).</p> <p></p> </li> <li> <p>Type w (A) in the new line and use Liberty code assistant (CTRL+SPACE) to select whereami (B).</p> <p></p> </li> <li> <p>Type = (A) after whereami, press CTRL+SPACE and select whereami (B).</p> <p></p> </li> <li> <p>Type .u (A) after wherami and select toUpperCase() (B).</p> <p></p> </li> <li> <p>Type ; (A) in the end and the code change will look like this:</p> <p></p> </li> <li> <p>Now go back to run your unite test again from the VS Code terminal window by pressing Enter (A).</p> <p></p> <p>You will see that the unit test and integration test are successful with the message: PASS ! ---&gt; The head has been converted to UPPER CASE!.</p> <p></p> </li> <li> <p>You can verify it in the whereami application at http://localhost:9080/whereami/.</p> <p></p> <p>You can see that the change is made to the application title.</p> </li> </ol>"},{"location":"Liberty%20Dev%20Mode/02%20Demo%20Guide/#8-summary","title":"8    Summary","text":"<p>In this demo, you learned how developers can use Liberty in dev mode for achieving efficient iterative develop, test, debug cycle when developing Java based applications / microservices. As you explored the fast and efficient inner-loop development experience using the Liberty dev mode and VS Code IDE, your code was automatically compiled and deployed to the running server, making it easy to iterate on your changes. </p>"},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/","title":"01 Environment Setup Guide","text":""},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#deploy-java-app-to-ocp-demo-environment","title":"Deploy Java App to OCP Demo Environment","text":""},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#hands-on-setup-guide","title":"Hands-on setup guide","text":""},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#1-introduction","title":"1    Introduction","text":"<p>This demo environment setup script walks through the prerequisite steps to setup demo environment for doing the Deploy Java App to OpenShift Container Platform (OCP) demo.</p>"},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#2-reserve-demo-environment","title":"2    Reserve demo environment","text":"<p>The demo environment runs in IBM Cloud. You can reserve the environment by using the following steps:</p> <ol> <li> <p>Launch the IBM Technology Zone Create a reservation URL</p> </li> <li> <p>Use your IBM ID to login to the IBM Technology Zone, the Create a reservation page is displayed.</p> </li> <li> <p>Select Reserve now (A) button.</p> </li> </ol> <p></p> <ol> <li> <p>Follow the on-screen dialog to reserve an environment in an IBM Cloud data center in the closest Geography (US-Central, EMEA, Asia Pacific).</p> <ul> <li>The environment name should be pre-filled with Liberty Container Deployment with CP4Apps on OpenShift </li> <li>Purpose: Education </li> <li>Description: Enter a description. The field is required </li> <li>Preferred Geography: Choose an IBM Cloud datacenter in the closest geography (US, EMEA, Asia Pacific) </li> <li>End date and time: Use the calendar widget and select the maximum date available and select a time of day for reservation to expire and select a timezone nearest to you. </li> <li>VPN Access: Select Enable from the dropdown list.</li> </ul> </li> <li> <p>Once complete, check the agreement box (A) and click on the Submit (B) button.</p> </li> </ol> <p> </p> <ol> <li>The reservation takes a moment to be created. You can check its status by selecting My library (A) then clicking My reservations (B).</li> </ol> <p></p> <p>You see your reservation is in the Provisioning status.</p> <p> </p> <p>It might take 15 minutes for the demo environment to be provisioned. When the environment is created, its status is changed to Ready.</p> <p></p>"},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#3-access-the-demo-environment","title":"3    Access the demo environment.","text":"<ol> <li>When the demo environment is provisioned, click the reservation icon (A) to go to its details page.</li> </ol> <ol> <li>In the reservation details page, click the Workstation VM (A) URL link to open the URL in a new browser window.</li> </ol> <ol> <li>Click vnc.html (A) link.</li> </ol> <ol> <li>Click the Connect (A) button.</li> </ol> <ol> <li>Enter the password as: passw0rd (A). Then click the Send Credentials (B) button to access the lab environment.</li> </ol> <p>Note: That is a numeric zero in passw0rd.</p> <p>Once you log in to the Demo VM, you see the Desktop, which contains all the programs that you are going to use (browsers, terminal, and so on).</p> <p></p> <p>The login credentials for the demo VM are:</p> <ul> <li>User ID: techzone</li> <li>Password: passw0rd </li> </ul>"},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#4-tips-for-working-in-the-demo-environment","title":"4    Tips for working in the Demo environment","text":"<ol> <li> <p>You can resize the viewable area by using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a.    From the demo VM, click the twisty (A) on the noVNC control pane to open the menu. </p> <p></p> <p>b.    To increase the visible area, click the Settings (A) icon and select Remote Resizing (B) from the Scaling Mode dropdown box.</p> <p></p> </li> <li> <p>You can copy / paste text from the Demo guide into the Demo environment by using the clipboard in the noVNC viewer. </p> <p>a.    Copy the text from the Demo guide that you want to paste into the Demo environment.</p> <p>b.    Click the Clipboard (A) icon and paste the text into the noVNC Clipboard (B).</p> <p> </p> <p>c.    Paste the text into the VM, such as to a terminal window, text editor or browser window.</p> <p>d.    Click on the clipboard icon again to close the clipboard</p> </li> </ol>"},{"location":"Transformation%20Advisor/01%20Environment%20Setup%20Guide/#5-configure-the-demo-environment","title":"5    Configure the demo environment","text":"<ol> <li> <p>Clone GitHub demo artifacts</p> <p>To run the demo, you need to clone the GitHub demo artifacts to the Demo VM environment first.</p> <p>a.    Click the terminal (A) icon.</p> <p></p> <p>b. Clone the GitHub repo by running the following commands from the terminal window. </p> <pre><code>cd /home/techzone\ngit clone https://github.com/IBMTechSales/appmod-pot-labfiles.git\n</code></pre> <p>Once it is done, the local demo artifacts repo will be at the /home/techzone/appmod-pot-labfiles directory on the demo VM desktop.</p> <p>c.    Copy the demo zip file to the /home/techzone/Downloads directory and unpack it by running the following commands:</p> <pre><code>cp /home/techzone/appmod-pot-labfiles/demo/modresorts10war.ear_migrationBundle-demo_ready.zip /home/techzone/Downloads\n\nunzip -d ~/Downloads /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready.zip\n</code></pre> </li> <li> <p>Configure Transformation Advisor</p> <p>a. Launch Transformation Advisor from the terminal window with the command:</p> <pre><code>transformation-advisor-local-3.8.1/launchTransformationAdvisor.sh\n</code></pre> <p>b. Type 5 and press Enter (A) to start the Transformation Advisor.</p> <p></p> <p>The Transformation Advisor is started after a few minutes.</p> <p></p> <p>c. Access the Transformation Advisor page form a web browser by double-clicking the browser (A) icon on the desktop.</p> <p></p> <p>d. Click the Transformation Advisor (A) bookmark in the browser to access it.</p> <p></p> <p>The Transformation Advisor page is displayed.</p> <p> </p> <p>e.    Create a workspace in Transformation Advisor by clicking Create new (A).</p> <p></p> <p>f.    Type Evaluation (A) as the workspace name and click Create (B).</p> <p> </p> <p>g. Upload collected WebSphere Server application data to Transformation Advisor by clicking Upload (A).</p> <p></p> <p>h.    Click Drop or add file (A).</p> <p></p> <p>i.    In the File Upload window, navigate to the /home/techzone/appmod-pot-labfiles/labs/TransformationAdvisor (A) folder, select AppSrv01-3.8.1.zip (B) and click Open (C).</p> <p></p> <p>After a few minutes, the collected WebSphere Server application data is uploaded into Transformation Advisor.</p> <p></p> </li> </ol> <p>The Demo environment setup is now completed.</p>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/","title":"02 Demo Guide","text":""},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#deploy-java-app-to-ocp","title":"Deploy Java App to OCP","text":""},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#hands-on-demo-guide","title":"Hands-on demo guide","text":""},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#1-introduction","title":"1    Introduction","text":"<p>This demo provides fundamental hands-on experience with modernizing existing Java applications to WebSphere Liberty, deployed into a container platform, such as Red Hat OpenShift.</p> <p>The focus of this demo is on the practical aspects of how to use the deployment artifacts created by Transformation Advisor to speed up the process to deploy a Java app to Liberty running on OpenShift to achieve the objective for operation modernization.</p> <p>Open Liberty is an application server designed for the cloud. It\u2019s small, lightweight, and designed with modern cloud-native application development in mind. </p> <p>Open Liberty supports the full MicroProfile and Jakarta EE APIs and is composable, meaning that you can use only the features that you need, keeping the server lightweight, which is great for microservices. It also deploys to every major cloud platform, including Docker, Kubernetes, and Cloud Foundry.</p> <p>Operational Modernization gives an operations team the opportunity to embrace modern operations best practices without putting change requirements on the development team.</p> <p>The scaling, routing, clustering, high availability, and continuous availability functionality that were previously provided by the application server middleware, can be provided by the container platform.</p> <p>This allows the operations team to run cloud-native and modernized applications in the same environment with the same standardized logging, monitoring, and security frameworks.</p> <p>The operation modernization solution provided by IBM Cloud Pak for Application is to move existing Java applications to Liberty containers.</p> <p>IBM Cloud Transformation Advisor (TA) is an application modernization tool that is entitled through IBM Cloud Pak for Applications. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud.</p> <p>The Transformation Advisor tool provides the following value:</p> <ul> <li>Identifies the Java EE programming models in the app</li> <li>Determines the complexity of replatforming these apps by listing a high-level inventory of the content and structure of each app</li> <li>Highlights Java EE programming model and WebSphere API differences between the WebSphere runtime profile types</li> <li>Identifies Java EE specification implementation differences that might affect the app</li> <li>Generates accelerators for deploying the application to Liberty and containers in a target environment</li> </ul> <p>Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It automatically generates a migration bundle with the artifacts you will need to containerize your application running on Liberty and deploy it to OpenShift Cloud Platform, accelerating application migrating to cloud process, minimizing errors and risks and reducing time to market.</p> <p>Operator is the Kubernetes operator and specifically the Liberty operator. Liberty operator is used in the demo to deploy the app running on Liberty to the OpenShift Container Platform (OCP). The value of operators, in general, is that it really simplifies the amount of configuration required to do a deployment via all the YAML files that are typically required in Kubernetes. Additional benefits specifically to the Liberty operator is that it offers the automation of common tasks, like deploying, scaling, getting dumps, including thread dumps, core dumps and heap dumps, and gathering app logs. Another key benefit of the operator is that it provides out-of-the-box security capability, including certificate management integration with OCP and single sign-on delegation.</p> <p>Kubernetes Kustomize is a tool that is native to Kubernetes that is available for customizing Kubernetes configuration. The idea is that the base configuration can be reused for deployments across different environments like development, staging, and production. The changes and modifications for different environments are provided as the adjustment snippets for the base configuration override. In this demo the deployment YAML file created by Transformation Advisor uses the Kustomize tool.</p> <p>Mod Resorts app is a WebSphere application showing the weather in various locations. This app is initially developed for WebSphere traditional.  In the demo it will be moved to Liberty in a container and deployed to OCP.</p> <p></p> <p>Demo Commands File lists all the commands used to setup and run the demo, so you can open it in a text editor and directly copy/paste the commands during the demo without going through the noVNC control pane. This file is provided to simplify the demo process. The file name is demo-setup-plus-commands.txt and it is in the /home/techzone/appmod-pot-labfiles/demo directory. </p> <p></p> <p>The commands used for this demo start from line 71 of the file.</p> <p></p> <p>In this demo, we are going to showcase how to rapidly deploy and configure the Mod Resorts app in Liberty running on an OpenShift Container Platform (OCP). We will show how easy it is to use IBM Transformation Advisors migration artifacts to accelerate the steps of the modernization journey, including build, configuration, and deployment. It will demonstrate that how quickly clients can realize the values from WebSphere Liberty and OCP, which provide greater deployment flexibility and operational efficiencies across the enterprise. We are also going to show how to config and use IBM License Service in OCP.</p> <p>The objectives of this demo are to:</p> <ul> <li>Learn how to use the Transformation Advisor migration bundle to build the application into a container image</li> <li>Learn the role of Kustomize when deploying the migration bundle</li> <li>Learn how to deploy the app to OpenShift with a single command</li> <li>Review the deployment configuration and learn how to configure and use the IBM License Service tracking in OCP</li> </ul>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#2-access-transformation-advisor","title":"2    Access Transformation Advisor","text":"<pre><code>Talking Points\n\nTo get started in the demo, I will go to IBM Transformation Advisor User Interface to look at the WebSphere applications Transformation Advisor analyzed \n\nAt the beginning of this demo, I have already gotten the Transformation Advisor Data Collector run on the WebSphere Application Server and gotten the analysis data loaded into the Transformation Advisor User Interface. \n\nNow let me go to Transformation Advisor User Interface to take a look at these applications. I will focus on the simple WebSphere applications Transformation Advisor identified. A simple application is the app that Transformation Advisor has assessed and indicated that no code changes are required for the app to run on Liberty. \n</code></pre> <ol> <li> <p>If the Transformation Advisor is not started yet, start it by running the command below in a terminal window. Otherwise skip this step.</p> <pre><code>cd /home/techzone/transformation-advisor-local-3.8.1\n\n./launchTransformationAdvisor.sh\n</code></pre> </li> <li> <p>Type 5 and press Enter (A) to start the Transformation Advisor.</p> <p> </p> <p>The Transformation Advisor is started after a few minutes.</p> <p> </p> <p>Note: you might see an error message when launching the Transformation Advisor, just ignore it, because it will not impact the start of Transformation Advisor.</p> </li> <li> <p>Access Transformation Advisor page from a web browser by clicking the Transformation Advisor (A) bookmark in the browser.</p> <p> </p> <p>The Transformation Advisor page is displayed.</p> <p> </p> </li> <li> <p>Click the Evaluation workspace (A) to open it.</p> <p> </p> <p>The Evaluation workspace is displayed.</p> <p> </p> <p>Notice that only WebSphere Liberty is selected as Migration target which is the platform we want to move the Mod Resorts app to.</p> </li> </ol>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#3-download-transformation-advisor-migration-plan","title":"3    Download Transformation Advisor migration plan","text":"<pre><code>Talking Points\n\nNow I am in Transformation Advisor and as one can see there are five applications assessed. \n\nWe have other demonstrations that showcase how to do an application assessment and how to interpret the results, but in this demo, I am going to focus primarily on the migration plan and what it is going to take to move an application from the WebSphere traditional to WebSphere Liberty running on a container platform.\n\nI want to focus on moving a simple application from WebSphere traditional to Liberty without any code change. As you can see, five applications have been assessed and four of these have been classified as simple, meaning no code change is required to move them to Liberty. I will choose the Mod Resort application that I have staged and set up for the demo.\n\nFirst, I will take a look at the Transformation Advisor migration plan which contains the artifacts that have been generated by Transformation Advisor as a result of scanning the application and the configuration in WebSphere Application Server (WAS). By doing so, I can understand the Liberty server configuration, the build file to build the container image as well as the YAML artifacts to deploy into a Kubernetes and OCP which are created by Transformation advisor. \n\nIn this task, I need to simply download the migration plan to my local workstation.\n</code></pre> <ol> <li> <p>Scroll down to locate the Mod Resort application (A) in Transformation Advisor and click Migration plan (B).</p> <p> </p> </li> <li> <p>The Migration plan page is displayed, click Download (A).</p> <p> </p> <p>The Migration plan package named modresorts10war.ear_migrationBundle.zip is now downloaded to the Downloads directory of the demo VM. It contains the Liberty server configuration (server.xml), the build file (Containerfile) to build the container image as well as the YAML artifacts to deploy into a Kubernetes or OCP environment.</p> <p></p> <p>Note: The Transformation Advisor Migration plan package is also called the Transformation Advisor migration bundle.</p> </li> </ol>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#4-review-the-updated-transformation-advisor-migration-bundle","title":"4    Review the updated Transformation Advisor migration bundle","text":"<pre><code>Talking Points\n\nThe Mod Resorts app Migration bundle gets downloaded into the Downloads directory of the local file system from Transformation Advisor. \n\nIn order to deploy the application to Liberty on OpenShift, I need to make a few changes to the bundle, including changing server configuration settings, adding app war file and update image file name and other settings in the deployment YAML file. To keep the demo simple, I will use a prepared migration bundle where I already applied the required changes. The prepared migration bundle package is in the modresorts10war.ear_migrationBundle-demo_ready directory.\n\nI will take a quick look at what are in the migration bundle:\n\n1. The bundle includes a file named Containerfile to build the container image with the app deployed on Liberty. \n\n2. I placed the war file of the Mod Resorts app into the target directory. Since no code changes are required, I do not need to rebuild the application and just copied the war file that WAS used. \n\n3. The source directory in the bundle includes the liberty server configuration file, server.xml, which is created by Transformation Advisor. It includes the server configuration for Mod Resorts to run in Liberty and a few minor modifications I made.\n\n4. The last piece I want to look at is the deployment artifacts in the deploy directory of the migration bundle. These are the YAML files that Transformation Advisor created to deploy the app to a Kubernetes environment using the standard Kubernetes resources or the Liberty operator. In this demo, I am using the Liberty Operator and the Kustomize tool to deploy the app to OCP. \n\nBasically, I have the customization files for deploying the Mod Resorts app to Liberty container running on OCP and I will use these customized migration bundle files that Transformation Advisor generated.\n</code></pre> <ol> <li> <p>From the File manager window, click the modresorts10war.ear_migrationBundle-demo_ready (A) folder under the /home/techzone/Downloads directory to access it.</p> <p></p> </li> <li> <p>Review the contents in the directory. The migration bundle has all artifacts that we need to deploy the app to Liberty in container and to a Kubernetes environment. The Containerfile is the one to be used to create the Docker image.</p> <p></p> </li> <li> <p>Click target (A) folder to access it.</p> <p></p> <p>This directory contains the original app war file because there are no code changes needed to move it from WebSphere traditional to Liberty.</p> <p></p> </li> <li> <p>Click the src (A) folder and go to the main&gt;liberty&gt;config directory.</p> <p></p> <p>We see the Liberty configuration file, server.xml, which includes the server configuration for Mod Resorts to run in Liberty and a few minor modifications.</p> <p></p> </li> <li> <p>Click the deploy (A) folder to open it</p> <p></p> <p>We see two folders, k8s and kustomize, which contain the YAML files that Transformation Advisor created to deploy the app to a Kubernetes environment. While the k8s folder is used for deployments using the standard Kubernetes resources, kustomize is used for deployments using the Liberty operator.</p> <p></p> </li> <li> <p>Click the kustomize (A) folder and go to the base directory.</p> <p></p> <p>The base folder contains the YAML files used to deploy the app to a Liberty container running on OCP using Liberty operator.</p> <p></p> </li> </ol>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#5-create-docker-container-image","title":"5    Create Docker container image","text":"<pre><code>Talking Points\n\nTo deploy the Mod Resorts app in Liberty on container, I need to build a container image for the app first. In this task, I am going to leverage the updated migration bundle artifices, and create a Docker container for the Mod Resorts app. I will show how easy it is to deploy the app in a local Docker container using the migration bundle artifices from Transformation Advisor.\n\nThe first thing I am going to do is to go to the migration bundle directory structure and run the command to build the Docker image. The command will take the Containerfile that Transformation Advisor created and it is going to build the container image for the Mod Resorts app running on Liberty. \n\nAfter the image is created, I will verify it by starting a Docker container with docker run command. I will verify that the container is running and show I can access the Mod Resorts app running on Liberty in a local Docker container.\n\nOnce the image is created and verified, it is ready to be deployed to OCP in the next task.\n</code></pre> <ol> <li> <p>From a terminal window, go to migration bundle directory with command:</p> <pre><code>cd /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready\n</code></pre> </li> <li> <p>Build Docker image with command:</p> <pre><code>docker build -f ./Containerfile --tag default-route-openshift-image-registry.apps.ocp.ibm.edu/resorts/modresorts:23009 .\n</code></pre> <p>The Docker image is built.</p> <p> </p> <p>Note: The first time to build the Docker image, it will take a longer time because it needs to download all the artifacts to the local demo VM. After that, each build will only pull down the updated artifacts, so the process will be much fast. Therefore, it is recommended to run the command to build the image first before doing the client facing demo to save time.</p> </li> <li> <p>To verify the Docker image, run the command below:</p> <pre><code>docker images | grep resorts\n</code></pre> <p>We can see that the Docker image is created.</p> <p> </p> </li> <li> <p>Now we start the app container with the Docker image with the following command:</p> <pre><code>docker run -d --rm -p 9080:9080 --name resorts default-route-openshift-image-registry.apps.ocp.ibm.edu/resorts/modresorts:23009\n</code></pre> </li> <li> <p>To verify the container is running, issue the following command:</p> <pre><code>docker ps | grep resorts\n</code></pre> <p>We can see that the container is running.</p> <p> </p> </li> <li> <p>To test the application, access its URL at http://localhost:9080/resorts (A) from a browser window.</p> <p> </p> <p>The Mod Resorts application page is displayed.</p> <p> </p> </li> <li> <p>Click WHERE TO? (A) and select San Francisco, USA (B).</p> <p> </p> <p>The weather information is San Francisco is showing.</p> <p> </p> <p>Now we have tested and verified that the app is running on Liberty container. What we will do next is to deploy the app in Liberty container to OCP.</p> </li> </ol>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#6-deploy-to-openshift-environment","title":"6    Deploy to OpenShift environment","text":"<pre><code>Talking Points\n\nIn the last section, I have built the Mod Resorts app on Liberty container image and tested it.\nAlso in the previous section, we explored the Kubernetes kustomize structure coming from the Transformation Advisor migration bundle.\n\nIn this section I will use the kustomize tool to deploy the Mod Resorts app to OCP. \n\nBefore I do the deployment, I will stop the local Docker container first.\n\nIn order to deploy the Mod Resorts app to OCP, I will push the image to an image registry which can be any image registry the clients are using. In this demo, I am going to use the internal registry that is available in the OCP environment. \n\nTo push the image into OCP, I will need to log into the OCP environment, create a new project called resorts for the app and log into the internal OCP image registry. Then I will run a single command to push the app image from my local VM to the OCP image registry. \n\nAfter pushed the image into the OCP image registry, I will verify it either from command line or from the OCP web console.\n\nOnce I have uploaded the app image into OCP, I am ready to deploy the app to OCP. With Transformation Advisor, this deployment process is made really simple by using the artifacts that Transformation Advisors created and using the kustomize tool in Kubernetes. One can configure and deploy all in a single command and a single step.\n\nAfter the app is deployed to OCP, we can access it through its route URL which is generated by the Liberty operator.\n</code></pre> <ol> <li> <p>From a terminal window, run the following command to stop the local Liberty container.</p> <pre><code>docker stop resorts\n</code></pre> <p>The local Liberty container is now stopped.</p> </li> <li> <p>Log in to the OCP cluster with command:</p> <pre><code>oc login -u ocadmin -p ibmrhocp\n</code></pre> <p></p> </li> <li> <p>Create a new project called resorts for the Mod Resorts app with command:</p> <pre><code>oc new-project resorts\n</code></pre> <p></p> </li> <li> <p>Log in to the OCP image registry with command:</p> <pre><code>docker login -u $(oc whoami) -p $(oc whoami -t) default-route-openshift-image-registry.apps.ocp.ibm.edu\n</code></pre> <p></p> </li> <li> <p>Now push the app image to the OCP image registry with command:</p> <pre><code>docker push default-route-openshift-image-registry.apps.ocp.ibm.edu/resorts/modresorts:23009\n</code></pre> <p></p> <p>Note: It might take a few minutes to upload the image to the registry.</p> </li> <li> <p>After the image is uploaded to the OCP image registry, we can verify it with command:</p> <pre><code>oc get is\n</code></pre> <p> </p> </li> <li> <p>We can also verify it from the OCP web console.</p> <p>a.  Access the OCP web console by clicking the OpenShift Console (A) bookmark in the web browser.</p> <p> </p> <p>b.  Accept the default Username/Password and click Log in (A).</p> <p></p> <p>After logged in, the OCP web console Home page is displayed.</p> <p> </p> <p>c.  Click Builds (A), select ImageStreams (B) and select resorts project (C), we can see that the app image is listed.</p> <p> </p> <p>d.  Click the app image link (A) to view its details.</p> <p> </p> <p>The app image detail page is displayed.</p> <p> </p> <p>Now we have verified that the app image is uploaded, we are ready to deploy the app to OCP using the YAML artifacts generated by Transformation Advisor.</p> </li> <li> <p>From the OCP web console, click Workloads (A) and click Pods (B), we can see that currently we do not have any app pods running.</p> <p></p> </li> <li> <p>From the OCP web console, click Workloads (A) and click Deployment (B), we can see that currently we do not have any app deployment yet.</p> <p></p> </li> <li> <p>To deploy the Mod Resorts app to OCP, go to the terminal window and run the following commands:</p> <pre><code>cd /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready\n\ncd deploy/kustomize\n\noc apply -n resorts -k overlays/resorts_1.0\n</code></pre> <p></p> <p>This is a quick command run. Please note that the oc apply command is using the kustomize tool with a -k option and it is pointing to the overlays directory and a sub directory named resource_1.0, so it uses the YAML files in that overlay directory in addition to the base configuration that is in the base directory of the migration bundle.</p> </li> <li> <p>To check the status of the deployment, we can run command:</p> <pre><code>oc get pods\n</code></pre> <p>We can see that 8 pods are created and they are starting to run. We might need to run the same command a few times until all 8 pods are up running.</p> <p> </p> </li> <li> <p>Once these pods are up and running, we need to get the application route so we can access it. To get the route, run command:</p> <pre><code>oc get route -n resorts\n</code></pre> <p>We can see that the app route is: http://modresorts10war-resorts.apps.ocp.ibm.edu</p> <p></p> </li> <li> <p>With the app route information, we can access the Mod Resorts app in OCP from a web browser by entering the URL as: http://modresorts10war-resorts.apps.ocp.ibm.edu/resorts (A).</p> <p></p> <p>We can see that the Mod Resorts app has been successfully deployed to the OCP environment and is running on the OCP now.</p> </li> </ol>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#7-review-the-deployment-configuration-and-use-the-license-service","title":"7    Review the deployment configuration and use the License service","text":"<pre><code>Talking Points\n\nI have deployed the Mod Resorts app to the OCP environment with 8 pods running in the previous section.  Now I will take a look at the deployment YAML file to review the deployment configuration.\n\nTo deploy the Mod Resorts app to the OCP, I used the app YAML file in the base/kustomize folder of the migration bundle, which actually points to the app image that I pushed to the OCP image registry.\nIn this particular deployment YAML file, I have specified to spin up 8 replicas of the Mod Resorts app and that is the reason we see the 8 pods running in the OCP environment.\n\nI added the license tracking information in the YAML file, so we see how the license service is working with the Liberty operator in OCP. \n\nIn order to deploy the app and use the license service in OCP, I need to specify that I accept the license, where to get the entitlement from and what the Liberty edition I am using. I set the entitlement and the Liberty edition as: the Cloud Pak for Applications and Liberty Core. \n\nAdditionally, I put a resource limit on the amount of CPU each pod can use and specified it as 1 virtual core. In general, the CPU limit should be set to a value for what the app needs, the value impacts not only the licensing but also the app deployment and overall CPU usage. I did this setting to demo the license tracking capability in OCP. Because in Cloud Pak for Applications Standard edition Liberty Core deployment is based on virtual processor cores in 8 to 1 ratio, meaning that based on the deployment configuration I set, even I have 8 Liberty Core pods running in OCP, I only consumed 1 virtual processor core of Cloud Pak for Applications. \n\nFinally, I will show how to access the License tracing service report in OCP.\n</code></pre> <ol> <li> <p>To review the deployment configurations, double-click the File Manager (A) icon on the Desktop.</p> <p> </p> </li> <li> <p>Navigate to the /home/techzone/Downloads/modresorts10war.ear_migrationBundle-demo_ready/deploy/kustomize/base directory.</p> <p>The contents in the directory are displayed.</p> <p> </p> </li> <li> <p>Click the application-cr.yaml (A) file to open it for reviewing. This is the application customer resource YAML file.</p> <p></p> <p>The content of the YAML file is displayed.</p> <p> </p> <p>As we can see from this configuration file, the deployment replica is set as 8. The app image is pointing to the image that we pushed to the OCP image registry. The license tracking information is added as Cloud Pak for Application and Liberty Core and the CPU resource limit is set at 1000m.</p> </li> <li> <p>Now we can take a look at the license tracing service report about our license usage. To do it, go to the web browser and click the IBM License Service Status-with token (A) bookmark.</p> <p> </p> <p>Note: we can also enter the IBM License Service Status-with token URL as:  https://ibm-licensing-service-instance-ibm-common-services.apps.ocp.ibm.edu/status?token=dnwsnLNwvQ9ie4o9U5mpRhoG</p> <p>The License Service Report is displayed.</p> <p> </p> <p>The report shows that Liberty Core is running in 8 pods with one CPU per pod, so in total we consume 8 CPUs and the total Cloud Pak for Application license consumed is 1.</p> </li> <li> <p>Let\u2019s see that happened to the report if we remove the Mod Resorts app deployment from the OCP. To do it, run the following command from the terminal window to delete the deployment:</p> <pre><code>oc delete -n resorts -k overlays/resorts_1.0\n</code></pre> <p></p> </li> <li> <p>Now the Mod Resorts app deployment is deleted, let\u2019s see what happened in the License Service Report. Go back to the browser window and refresh (A) the License Service Report page.</p> <p> </p> <p>As we can see there is nothing listed in the report anymore.</p> <p> </p> </li> </ol>"},{"location":"Transformation%20Advisor/02%20Demo%20Guide/#8-summary","title":"8    Summary","text":"<p>In this demo, we learned how to move a WebSphere app from WebSphere traditional to WebSphere Liberty container and deploy it to OCP using the deployment artifacts produced by Transformation Advisor in its migration bundle.</p> <p>You explored the options for deployment:</p> <ul> <li>Liberty as an image running in a local container.</li> <li>Liberty as an image running in OpenShift.</li> </ul> <p>You learned how to easily configure and deploy an app to OpenShift using Transformation Advisor migration bundle deployment artifacts which leverage the Kubernetes kustomize tool.</p> <p>You learned how to enable the License service to the track the Liberty license usage in the deployment YAML and use Liberty operator and IBM License Service in OCP to access the License tracking report.</p>"}]}